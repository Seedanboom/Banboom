/*
原版作者: 张林羽觐

由于新版arduino IDE for mCookie中对SHT2x.h和ESP8266.h进行了修改
因此对原有代码进行修改 不需要任何外部头文件
*/

/**
 * 需要做替换的部分!!!!!!!!!
 * 
*/
#define SSID        "nova 5 Pro" //改为你的热点名称, 不要有中文
#define PASSWORD    "lsl20000726"//改为你的WiFi密码Wi-Fi密码
#define DEVICEID    "561935777" //OneNet上的设备ID
String apiKey = "b5QW8B5DZwht85EgPiY9rwyTuxI=";//与你的设备绑定的APIKey

/***/
#define HOST_NAME   "api.heclouds.com"
#define HOST_PORT   (80)
#define INTERVAL_NET      1000     //定义发送时间
//传感器部分================================   
#include <Wire.h>                                  //调用库  
#include <ESP8266.h>
#include <I2Cdev.h>                                //调用库  
#include <Microduino_SHT2x.h>

#define  sensorPin_1 A0
#define  alarm A2
#define IDLE_TIMEOUT_MS  3      // Amount of time to wait (in milliseconds) with no data 
                                   // received before closing the connection.  If you know the server
                                   // you're accessing is quick to respond, you can reduce this value.

//WEBSITE     


#include <Microduino_ColorLED.h> //引用彩灯库
#define PIN       D6         //彩灯引脚
#define Light_PIN A0  //光照传感器接AO引脚
#define NUM 1
#define Light_value1 400
#define Light_value2 800

ColorLED strip = ColorLED(NUM, PIN); 
const int buttonPin = 2;   
char buf[10];

#define INTERVAL_sensor 200
unsigned long sensorlastTime = millis();

float sensor_tem, sensor_hum, sensor_lux; 

#define INTERVAL_OLED 100

String mCottenData;
String jsonToSend;

//3,传感器值的设置 
float distance;                  //传感器温度、湿度、光照   
char  num1[7] ;    //换成char数组传输
#include <SoftwareSerial.h>
#define EspSerial mySerial
#define UARTSPEED  9600
SoftwareSerial mySerial(2, 3); /* RX:D3, TX:D2 */
ESP8266 wifi(&EspSerial);
//ESP8266 wifi(Serial1);                                      //定义一个ESP8266（wifi）的对象
unsigned long net_time1 = millis();                          //数据上传服务器时间
unsigned long sensor_time = millis();                        //传感器采样时间计时器

//int SensorData;                                   //用于存储传感器数据
String postString;                                //用于存储发送数据的字符串
//String jsonToSend;                                //用于存储发送的json格式参数
void setup(void)     //初始化函数  
{       

pinMode(buttonPin, INPUT);

 Serial.begin(9600);
  pinMode(Light_PIN,INPUT);
  strip.begin();                 //彩灯初始化
  strip.setBrightness(60);       //设置彩灯亮度
  
  //初始化串口波特率  
    Wire.begin();
    Serial.begin(115200);
    while (!Serial); // wait for Leonardo enumeration, others continue immediately
    Serial.print(F("setup begin\r\n"));
    delay(1);
    pinMode(sensorPin_1, INPUT);
  WifiInit(EspSerial, UARTSPEED);
  Serial.print(F("FW Version:"));
  Serial.println(wifi.getVersion().c_str());
  if (wifi.setOprToStationSoftAP()) {
    Serial.print(F("to station + softap ok\r\n"));
  } else {
    Serial.print(F("to station + softap err\r\n"));
  }
  if (wifi.joinAP(SSID, PASSWORD)) {
    Serial.print(F("Join AP success\r\n"));

    Serial.print(F("IP:"));
    Serial.println( wifi.getLocalIP().c_str());
  } else {
    Serial.print(F("Join AP failure\r\n"));
  }

  if (wifi.disableMUX()) {
    Serial.print(F("single ok\r\n"));
  } else {
    Serial.print(F("single err\r\n"));
  }

  Serial.print(F("setup end\r\n"));
    
  
}
float Humidity=0;
void green(){
  strip.setAllLED(0,225 ,0); 
    strip.show();
    delay(3000);
    }
    void red(){ 
      strip.setAllLED(225, 0, 0); 
      strip.show();
      unsigned long time1=millis();
      int buttonState=1;
      while(time1){
       buttonState = digitalRead(buttonPin);
        if( buttonState==0){
        Humidity++;
        tone(A3,200,80);
        }
        delay (100);
       if(millis() - time1 > 3000)
       break;};
      }
void loop(void)   
{   
   green();
   red();
    updateSensorData();                                     //将数据上传到服务器的函数
}
float Temperature;

void updateSensorData() {
  if (wifi.createTCP(HOST_NAME, HOST_PORT)) { //建立TCP连接，如果失败，不能发送该数据
    Serial.print("create tcp ok\r\n");
jsonToSend="{\"Temperature\":";
    dtostrf(Temperature,1,2,buf);
    jsonToSend+="\""+String(buf)+"\"";
   jsonToSend+=",\"Humidity\":";
    dtostrf(Humidity,1,2,buf);
    jsonToSend+="\""+String(buf)+"\"";
    jsonToSend+=",\"Light\":";
    dtostrf(sensor_lux,1,2,buf);
    jsonToSend+="\""+String(buf)+"\"";
    jsonToSend+="}";
    postString="POST /devices/";
    postString+=DEVICEID;
    postString+="/datapoints?type=3 HTTP/1.1";
    postString+="\r\n";
    postString+="api-key:";
    postString+=apiKey;
    postString+="\r\n";
    postString+="Host:api.heclouds.com\r\n";
    postString+="Connection:close\r\n";
    postString+="Content-Length:";
    postString+=jsonToSend.length();
    postString+="\r\n";
    postString+="\r\n";
    postString+=jsonToSend;
    postString+="\r\n";
    postString+="\r\n";
    postString+="\r\n";
  const char *postArray = postString.c_str();                 //将str转化为char数组
  Serial.println(postArray);
  wifi.send((const uint8_t*)postArray, strlen(postArray));    //send发送命令，参数必须是这两种格式，尤其是(const uint8_t*)
  Serial.println("send success");   
     if (wifi.releaseTCP()) {                                 //释放TCP连接
        Serial.print("release tcp ok\r\n");
        } 
     else {
        Serial.print("release tcp err\r\n");
        }
      postArray = NULL;                                       //清空数组，等待下次传输数据
  
  } else {
    Serial.print("create tcp err\r\n");
  }
}